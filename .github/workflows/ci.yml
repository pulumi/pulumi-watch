name: Merge

on:
  push:
    branches:
      - staging
      - trying
    tags-ignore:
      - "*"

jobs:
  info:
    name: Gather info
    runs-on: ubuntu-latest
    outputs:
      version: "${{ fromJSON(steps.version.outputs.version) }}"
      release_notes: "${{ fromJSON(steps.notes.outputs.release_notes) }}"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Compute version
        id: version
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # needed to get previous version
        run: |
          COMMIT_TITLE="$(git log -1 --pretty=%s)"
          PR_NUMBER="$(echo -n "$COMMIT_TITLE" | sed s/^.*#// | tr -cd '[:digit:]')"
          TARGET_BRANCH="$(gh pr view "${PR_NUMBER}" --json baseRefName --jq '.baseRefName')"

          # Sets output VERSION
          VERSION="$(./.github/scripts/get-version "${TARGET_BRANCH}")"

          ./.github/scripts/set-output version "${VERSION}"
      - name: Install git-cliff
        uses: baptiste0928/cargo-install@v1
        with:
          crate: git-cliff
          args: --git https://github.com/AaronFriel/git-cliff --rev 702c79236ef0b0a3d2430f73902db3339933fbfd
          version: 0.8.1
      - name: Extract release notes
        id: notes
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # needed to get previous version
        run: |
          PREVIOUS_VERSION="$(./.github/scripts/get-previous-version)"
          CHANGELOG="$(./.github/scripts/get-changelog "release-v${PREVIOUS_VERSION}" --tag "${{ fromJSON(steps.version.outputs.version) }}")"
          ./.github/scripts/set-output release_notes "${CHANGELOG}"

  version:
    # ensure versions in the repo match the intended publish version
    name: Version Check
    needs: [info]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          VERSION="${{ needs.info.outputs.version }}"

          ./.github/scripts/update-versions "$VERSION"

          if [ -n "$(git status --porcelain)" ]; then
            echo "::error::Versions in files do not match expected version $VERSION."
            echo "::group::git diff"
            git diff
            echo "::endgroup::"
          fi

  lint:
    name: Lint
    uses: ./.github/workflows/ci-lint.yml

  build:
    name: Build
    needs: [info]
    uses: ./.github/workflows/ci-build.yml
    with:
      version: ${{ needs.info.outputs.version }}
    secrets: inherit

  build-ok:
    # bors watches for this check
    name: Build OK
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - run: echo OK

  unit-test:
    name: Unit Test
    uses: ./.github/workflows/ci-unit-test.yml

  integration-test:
    name: Integration Test
    needs: [info, build]
    uses: ./.github/workflows/ci-integration-test.yml
    with:
      version: ${{ needs.info.outputs.version }}

  test-ok:
    # bors watches for this check
    name: Test OK
    needs: [lint, unit-test, integration-test]
    runs-on: ubuntu-latest
    steps:
      - run: echo OK

  publish:
    name: Publish
    needs: [test-ok, info]
    uses: ./.github/workflows/ci-publish.yml
    if: ${{ github.ref_name == 'staging' }}
    with:
      version: ${{ needs.info.outputs.version }}
      release_notes: ${{ needs.info.outputs.release_notes }}
    secrets: inherit

  publish-ok:
    # bors watches for this check
    name: Publish OK
    needs: [publish]
    runs-on: ubuntu-latest
    steps:
      - run: echo OK # test, block release
