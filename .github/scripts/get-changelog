#!/bin/bash

set -eo pipefail

>&2 echo "::group::Get changelog"
trap ">&2 echo '::endgroup::'" EXIT # bash equivalent of defer func()

# Argument may be of the form ((release-)?v)?MAJOR.MINOR.PATCH, or a commitish.
PREVIOUS_VERSION="$1"
shift 1
# All other arguments are passed to git-cliff as is.

# For debugging, use a commit other than HEAD as the 'current commit' to calculate the changelog.
CURRENT_COMMIT="${CURRENT_COMMIT:-HEAD}"
VERSION="$(echo -n "$VERSION" | sed 's/(release-)?v/release-v/')"

if [ -z "${PREVIOUS_VERSION}" ]; then
  PREVIOUS_VERSION="$(./.scripts/github/get-previous-version)"
else
  # Handle "release-v0.0.1" and "v0.0.1"
  PREVIOUS_VERSION="$(echo -n "${PREVIOUS_VERSION}" | sed 's/(release-)?v/release-v/')"
  >&2 echo "::debug::Previous version tag: ${PREVIOUS_VERSION}"
fi

if git merge-base --is-ancestor "${PREVIOUS_VERSION}" "${CURRENT_COMMIT}"; then
  >&2 echo "::debug::Previous version is an ancestor."
  MERGE_BASE="${PREVIOUS_VERSION}"
else
  >&2 echo "::debug::Previous version is not an ancestor, finding best common ancestor."
  MERGE_BASE="$(git merge-base "${PREVIOUS_VERSION}" "${CURRENT_COMMIT}")"
fi

>&2 echo "::debug::Merge base ${MERGE_BASE}"

git-cliff "${MERGE_BASE}..${CURRENT_COMMIT}" "${@}"
